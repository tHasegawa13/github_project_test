name: Sub-Issue Management

on:
  issues:
    types: [opened, edited]

jobs:
  check_parent_issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - name: ls
        run: |
          pwd
          ls
      - name: hello
        run: .github/workflows/scripts/check_subissue.sh
      - name: Check for parent issue and add labels
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const issue = context.payload.issue;
            const issueNumber = issue.number;

            try {
              // GraphQLクエリを実行して親Issueの情報を取得
              const query = `
                query($owner: String!, $repo: String!, $issueNumber: Int!) {
                  repository(owner: $owner, name: $repo) {
                    issue(number: $issueNumber) {
                      id
                      number
                      title
                      parent {
                        id
                      }
                    }
                  }
                }
              `;
              
              const variables = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issueNumber: issueNumber
              };
              
              const result = await github.graphql(query, variables);
              console.log(`Issue data: ${JSON.stringify(result)}`);
              
              // 親Issueが存在するかチェック
              const hasParent = result.repository.issue.parent !== null;
              
              if (hasParent) {
                console.log(`Issue #${issueNumber} has a parent issue. Adding subissue label and inheriting parent labels.`);
                
                // 現在のIssueのラベルを取得
                const currentLabels = issue.labels.map(label => label.name);
                const hasSubissueLabel = currentLabels.includes('subissue');
                
                // 親Issueのラベルを取得
                const parentId = result.repository.issue.parent.id;
                const parentQuery = `
                  query {
                    node(id: "${parentId}") {
                      ... on Issue {
                        number
                        labels(first: 100) {
                          nodes {
                            name
                          }
                        }
                      }
                    }
                  }
                `;
                
                const parentData = await github.graphql(parentQuery);
                const parentNumber = parentData.node.number;
                console.log(`Parent issue is #${parentNumber}`);
                
                // 親のラベルを取得し、Epicを除外
                let parentLabels = parentData.node.labels.nodes.map(label => label.name)
                  .filter(label => label !== 'Epic');
                  
                console.log(`Parent labels (excluding Epic): ${JSON.stringify(parentLabels)}`);
                
                // subissueラベルと親のラベルを合わせる（重複を排除）
                let labelsToAdd = ['subissue', ...parentLabels];
                
                // 現在のIssueに既に存在するラベルは追加しない
                labelsToAdd = labelsToAdd.filter(label => !currentLabels.includes(label));
                
                if (labelsToAdd.length > 0) {
                  try {
                    await github.rest.issues.addLabels({
                      issue_number: issueNumber,
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      labels: labelsToAdd
                    });
                    console.log(`Added labels to issue #${issueNumber}: ${JSON.stringify(labelsToAdd)}`);
                  } catch (labelError) {
                    console.error(`Error adding labels: ${labelError.message}`);
                    console.log("Make sure all labels exist in your repository");
                  }
                } else {
                  console.log(`No new labels to add to issue #${issueNumber}`);
                }
                
                console.log(`Issue #${issueNumber} has been processed as a sub-issue`);
              } else {
                console.log(`Issue #${issueNumber} does not have a parent issue.`);
              }
            } catch (error) {
              console.error(`Error processing issue: ${error.message}`);
            }

      - name: Add issue to project
        if: success()
        uses: actions/github-script@v7
        with:
          # PAT（Personal Access Token）を使用してプロジェクトの操作を行う
          github-token: ${{secrets.PROJECT_ACCESS_TOKEN}}
          script: |
            const issue = context.payload.issue;
            const issueNumber = issue.number;

            try {
              // GraphQLクエリを実行して親Issueの情報を取得
              const query = `
                query($owner: String!, $repo: String!, $issueNumber: Int!) {
                  repository(owner: $owner, name: $repo) {
                    issue(number: $issueNumber) {
                      id
                      number
                      title
                      parent {
                        id
                      }
                    }
                  }
                }
              `;
              
              const variables = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issueNumber: issueNumber
              };
              
              const result = await github.graphql(query, variables);
              
              // 親Issueが存在するかチェック
              const hasParent = result.repository.issue.parent !== null;
              
              if (hasParent) {
                // 指定されたGitHub Projectに追加
                try {
                  // Project項目のIDを取得するGraphQLクエリ
                  const projectQuery = `
                    query {
                      user(login: "tHasegawa13") {
                        projectV2(number: 1) {
                          id
                        }
                      }
                    }
                  `;
                  
                  const projectData = await github.graphql(projectQuery);
                  const projectId = projectData.user.projectV2.id;
                  
                  // IssueをProjectに追加するためのGraphQLミューテーション
                  const addToProjectMutation = `
                    mutation($projectId: ID!, $contentId: ID!) {
                      addProjectV2ItemById(input: {
                        projectId: $projectId
                        contentId: $contentId
                      }) {
                        item {
                          id
                        }
                      }
                    }
                  `;
                  
                  await github.graphql(addToProjectMutation, {
                    projectId: projectId,
                    contentId: result.repository.issue.id
                  });
                  
                  console.log(`Added issue #${issueNumber} to project users/tHasegawa13/projects/1`);
                } catch (projectError) {
                  console.error(`Error adding issue to project: ${projectError.message}`);
                }
              }
            } catch (error) {
              console.error(`Error in project step: ${error.message}`);
            }
