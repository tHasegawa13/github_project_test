name: Sub-Issue Management

on:
  issues:
    types: [opened, edited]

jobs:
  check_parent_issue:
    runs-on: ubuntu-latest
    steps:
      - name: Check for parent issue and add labels
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const issue = context.payload.issue;
            const issueNumber = issue.number;

            // GraphQLクエリを実行して親Issueの情報を取得
            const query = `
              query($owner: String!, $repo: String!, $issueNumber: Int!) {
                repository(owner: $owner, name: $repo) {
                  issue(number: $issueNumber) {
                    id
                    number
                    title
                    parent {
                      id
                    }
                  }
                }
              }
            `;

            const variables = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              issueNumber: issueNumber
            };

            const result = await github.graphql(query, variables);
            console.log(`Issue data: ${JSON.stringify(result)}`);

            // 親Issueが存在するかチェック
            const hasParent = result.repository.issue.parent !== null;

            if (hasParent) {
              console.log(`Issue #${issueNumber} has a parent issue. Adding subissue label.`);

              // 現在のラベルを取得
              const labels = issue.labels.map(label => label.name);
              const hasSubissueLabel = labels.includes('subissue');

              // subissueラベルが存在しない場合、追加
              if (!hasSubissueLabel) {
                await github.rest.issues.addLabels({
                  issue_number: issueNumber,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  labels: ['subissue']
                });
                console.log(`Added 'subissue' label to issue #${issueNumber}`);
              }

              // 指定されたGitHub Projectに追加
              try {
                // Project項目のIDを取得するGraphQLクエリ
                const projectQuery = `
                  query {
                    user(login: "tHasegawa13") {
                      projectV2(number: 1) {
                        id
                      }
                    }
                  }
                `;

                const projectData = await github.graphql(projectQuery);
                const projectId = projectData.user.projectV2.id;

                // IssueをProjectに追加するためのGraphQLミューテーション
                const addToProjectMutation = `
                  mutation($projectId: ID!, $contentId: ID!) {
                    addProjectV2ItemById(input: {
                      projectId: $projectId
                      contentId: $contentId
                    }) {
                      item {
                        id
                      }
                    }
                  }
                `;

                await github.graphql(addToProjectMutation, {
                  projectId: projectId,
                  contentId: result.repository.issue.id
                });

                console.log(`Added issue #${issueNumber} to project users/tHasegawa13/projects/1`);
              } catch (error) {
                console.error(`Error adding issue to project: ${error}`);
              }
            } else {
              console.log(`Issue #${issueNumber} does not have a parent issue.`);
            }
