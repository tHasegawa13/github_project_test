name: Sub-Issue Management

on:
  issues:
    types: [opened, edited]

env:
  PROJECT_OWNER: tHasegawa13
  PROJECT_NUMBER: 1

jobs:
  check_parent_issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - name: get parent issue
        id: get-parent-issue
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const query = `
              query($owner: String!, $repo: String!, $issueNumber: Int!) {
                repository(owner: $owner, name: $repo) {
                  issue(number: $issueNumber) {
                    id
                    number
                    title
                    parent {
                      id
                    }
                  }
                }
              }
            `;
            const result = await github.graphql(query, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              issueNumber: context.payload.issue.number
            });
            console.log(`Issue data: ${JSON.stringify(result)}`);

            return { parentIssueId: result.repository.issue.parent?.id }

      - name: add issue labels
        if: fromJSON(steps.get-parent-issue.outputs.result).parentIssueId != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const issueNumber = context.payload.issue.number;

            // 親Issueのラベルを取得
            const parentId = '${{ fromJSON(steps.get-parent-issue.outputs.result).parentIssueId }}'
            console.log(`Parent issue is #${parentId}`);

            const parentData = await github.graphql(`
              query {
                node(id: "${parentId}") {
                  ... on Issue {
                    number
                    labels(first: 100) {
                      nodes {
                        name
                      }
                    }
                  }
                }
              }
            `);

            const parentLabels = parentData.node.labels.nodes.map(label => label.name)
              .filter(label => label !== 'Epic');

            // 紐づけるラベルを配列で作成
            let labelsToAdd = ['subissue', ...parentLabels];
            const currentIssueLabels = context.payload.issue.labels.map(label => label.name);
            labelsToAdd = labelsToAdd.filter(label => !currentIssueLabels.includes(label));

            if (labelsToAdd.length > 0) {
              await github.rest.issues.addLabels({
                issue_number: issueNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: labelsToAdd
              });
              console.log(`Added labels to issue #${issueNumber}: ${JSON.stringify(labelsToAdd)}`);
            } else {
              console.log(`No labels to add to issue #${issueNumber}`);
            }

      - name: Add issue to project
        if: success()
        uses: actions/github-script@v7
        with:
          # PAT（Personal Access Token）を使用してプロジェクトの操作を行う
          github-token: ${{secrets.PROJECT_ACCESS_TOKEN}}
          script: |
            const issueNumber = context.payload.issue.number;
            const owner = process.env.PROJECT_OWNER;
            const projectNumber = process.env.PROJECT_NUMBER;

            // Project項目のIDを取得するGraphQLクエリ
            const projectQuery = `
              query {
                user(login: "${owner}") {
                  projectV2(number: ${projectNumber}) {
                    id
                  }
                }
              }
            `;
            const projectData = await github.graphql(projectQuery);
            const projectId = projectData.user.projectV2.id;

            // IssueをProjectに追加するためのGraphQLミューテーション
            const addToProjectMutation = `
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {
                  projectId: $projectId
                  contentId: $contentId
                }) {
                  item {
                    id
                  }
                }
              }
            `;
            await github.graphql(addToProjectMutation, {
              projectId: projectId,
              contentId: result.repository.issue.id
            });
