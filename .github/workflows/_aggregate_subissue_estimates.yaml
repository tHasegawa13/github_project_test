name: Epic Issue Estimate Summation

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: "Epic Issue Number"
        required: true
        type: number

jobs:
  sum_estimates:
    runs-on: ubuntu-latest
    permissions:
      issues: read
      contents: read
    steps:
      - name: Check Epic label and sum sub-issue estimates
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.PROJECT_ACCESS_TOKEN}}
          script: |
            const issueNumber = parseInt(context.payload.inputs.issue_number);

            try {
              // Check if the issue has Epic label
              const issueResponse = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber
              });
              
              const issue = issueResponse.data;
              const hasEpicLabel = issue.labels.some(label => label.name === 'Epic');
              
              if (!hasEpicLabel) {
                console.log(`Issue #${issueNumber} does not have the Epic label. Skipping.`);
                return;
              }
              
              console.log(`Processing Epic issue #${issueNumber}: ${issue.title}`);
              
              // Get sub-issues using GraphQL
              const subIssuesQuery = `
                query($owner: String!, $repo: String!, $issueNumber: Int!) {
                  repository(owner: $owner, name: $repo) {
                    issue(number: $issueNumber) {
                      id
                      number
                      title
                      subIssues(first: 100) {
                        nodes {
                          id
                          number
                          title
                        }
                      }
                    }
                  }
                }
              `;
              
              const variables = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issueNumber: issueNumber
              };
              
              const result = await github.graphql(subIssuesQuery, variables);
              const subIssues = result.repository.issue.subIssues.nodes;
              
              if (subIssues.length === 0) {
                console.log(`Epic issue #${issueNumber} has no sub-issues.`);
                return;
              }
              
              console.log(`Found ${subIssues.length} sub-issues for Epic #${issueNumber}`);
              
              // まずプロジェクト情報を取得
              const projectQuery = `
                query {
                  user(login: "tHasegawa13") {
                    projectV2(number: 1) {
                      id
                      title
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2FieldCommon {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const projectData = await github.graphql(projectQuery);
              const projectId = projectData.user.projectV2.id;
              const projectTitle = projectData.user.projectV2.title;
              console.log(`Target project: ${projectTitle} (ID: ${projectId})`);
              
              // プロジェクト内のフィールドを確認
              console.log('Available fields in the project:');
              projectData.user.projectV2.fields.nodes.forEach(field => {
                console.log(`- ${field.name} (ID: ${field.id})`);
              });
              
              // Estimateフィールドを特定
              const estimateField = projectData.user.projectV2.fields.nodes.find(
                field => field.name === 'Estimate'
              );
              
              if (!estimateField) {
                console.log(`Could not find Estimate field in project ${projectTitle}`);
                return;
              }
              
              const estimateFieldId = estimateField.id;
              console.log(`Found Estimate field: ID: ${estimateFieldId}`);
              
              // (Epic)Estimateフィールドを特定
              const epicEstimateField = projectData.user.projectV2.fields.nodes.find(
                field => field.name === '(Epic)Estimate'
              );
              
              if (!epicEstimateField) {
                console.log(`Could not find (Epic)Estimate field in project ${projectTitle}`);
                return;
              }
              
              console.log(`Found field: ${epicEstimateField.name} (ID: ${epicEstimateField.id})`);
              
              // 特定プロジェクト内のすべてのアイテムを一度に取得
              const projectItemsQuery = `
                query($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      items(first: 100) {
                        nodes {
                          id
                          content {
                            ... on Issue {
                              id
                              number
                              title
                            }
                          }
                          fieldValues(first: 100) {
                            nodes {
                              ... on ProjectV2ItemFieldNumberValue {
                                field {
                                  ... on ProjectV2FieldCommon {
                                    id
                                    name
                                  }
                                }
                                number
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const projectItemsVariables = {
                projectId: projectId
              };
              
              const projectItemsData = await github.graphql(projectItemsQuery, projectItemsVariables);
              const allProjectItems = projectItemsData.node.items.nodes;
              
              console.log(`Retrieved ${allProjectItems.length} items from project ${projectTitle}`);
              
              // Get estimate values for each sub-issue directly
              let totalEstimate = 0;
              
              for (const subIssue of subIssues) {
                // プロジェクト内でこのサブイシューに対応するアイテムを探す
                const projectItem = allProjectItems.find(item => 
                  item.content && 
                  item.content.number === subIssue.number
                );
                
                if (!projectItem) {
                  console.log(`Sub-issue #${subIssue.number} (${subIssue.title}): Not found in project ${projectTitle}`);
                  continue;
                }
                
                // このアイテムのEstimateフィールドを探す
                const fieldValues = projectItem.fieldValues.nodes;
                const estimateValue = fieldValues.find(value => 
                  value.field && 
                  value.field.id === estimateFieldId
                );
                
                if (estimateValue && estimateValue.number !== null) {
                  console.log(`Sub-issue #${subIssue.number} (${subIssue.title}): Estimate = ${estimateValue.number}`);
                  totalEstimate += estimateValue.number;
                } else {
                  console.log(`Sub-issue #${subIssue.number} (${subIssue.title}): No estimate found in project ${projectTitle}`);
                }
              }
              
              console.log(`Total estimate for Epic #${issueNumber}: ${totalEstimate}`);
              console.log(`Sum of all sub-issue estimates: ${totalEstimate}`);
              
              // Epicのプロジェクトアイテムを取得
              const epicItem = allProjectItems.find(item => 
                item.content && 
                item.content.number === issueNumber
              );
              
              if (!epicItem) {
                console.log(`Epic issue #${issueNumber} is not associated with project ${projectTitle}.`);
                return;
              }
              
              console.log(`Found Epic #${issueNumber} in project ${projectTitle}`);
              
              // プロジェクトアイテムとフィールドIDが取得できたら更新を実行
              const itemId = epicItem.id;
              const fieldId = epicEstimateField.id;
              
              console.log(`Updating Epic #${issueNumber} with total estimate: ${totalEstimate}`);
              console.log(`Project ID: ${projectId}, Item ID: ${itemId}, Field ID: ${fieldId}`);
              
              // Estimate値を更新
              const updateMutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: Float!) {
                  updateProjectV2ItemFieldValue(
                    input: {
                      projectId: $projectId
                      itemId: $itemId
                      fieldId: $fieldId
                      value: { number: $value }
                    }
                  ) {
                    clientMutationId
                  }
                }
              `;
              
              const updateVariables = {
                projectId: projectId,
                itemId: itemId,
                fieldId: fieldId,
                value: totalEstimate
              };
              
              try {
                await github.graphql(updateMutation, updateVariables);
                console.log(`Successfully updated ${epicEstimateField.name} field for Epic #${issueNumber}`);
              } catch (updateError) {
                console.error(`Error updating Epic estimate: ${updateError.message}`);
                console.error(updateError);
              }
              
            } catch (error) {
              console.error(`Error processing Epic issue: ${error.message}`);
              console.error(error);
            }
