name: Epic Issue Estimate Summation

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: "Epic Issue Number"
        required: true
        type: number

jobs:
  sum_estimates:
    runs-on: ubuntu-latest
    permissions:
      issues: read
      contents: read
    steps:
      - name: Check Epic label and sum sub-issue estimates
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.PROJECT_ACCESS_TOKEN}}
          script: |
            const issueNumber = parseInt(context.payload.inputs.issue_number);

            try {
              // Check if the issue has Epic label
              const issueResponse = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber
              });
              
              const issue = issueResponse.data;
              const hasEpicLabel = issue.labels.some(label => label.name === 'Epic');
              
              if (!hasEpicLabel) {
                console.log(`Issue #${issueNumber} does not have the Epic label. Skipping.`);
                return;
              }
              
              console.log(`Processing Epic issue #${issueNumber}: ${issue.title}`);
              
              // Get sub-issues using GraphQL
              const subIssuesQuery = `
                query($owner: String!, $repo: String!, $issueNumber: Int!) {
                  repository(owner: $owner, name: $repo) {
                    issue(number: $issueNumber) {
                      id
                      number
                      title
                      subIssues(first: 100) {
                        nodes {
                          id
                          number
                          title
                        }
                      }
                    }
                  }
                }
              `;
              
              const variables = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issueNumber: issueNumber
              };
              
              const result = await github.graphql(subIssuesQuery, variables);
              const subIssues = result.repository.issue.subIssues.nodes;
              
              if (subIssues.length === 0) {
                console.log(`Epic issue #${issueNumber} has no sub-issues.`);
                return;
              }
              
              console.log(`Found ${subIssues.length} sub-issues for Epic #${issueNumber}`);
              
              // Get estimate values for each sub-issue directly
              let totalEstimate = 0;
              
              for (const subIssue of subIssues) {
                // サブイシューのプロジェクトアイテムとEstimate値を直接取得
                const subIssueQuery = `
                  query($owner: String!, $repo: String!, $issue_number: Int!) {
                    repository(owner: $owner, name: $repo) {
                      issue(number: $issue_number) {
                        projectItems(first: 100) {
                          nodes {
                            fieldValues(first: 100) {
                              nodes {
                                ... on ProjectV2ItemFieldNumberValue {
                                  field {
                                    ... on ProjectV2FieldCommon {
                                      name
                                    }
                                  }
                                  number
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                `;
                
                const subIssueVariables = {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: subIssue.number
                };
                
                const subIssueData = await github.graphql(subIssueQuery, subIssueVariables);
                const projectItems = subIssueData.repository.issue.projectItems.nodes;
                
                if (projectItems.length === 0) {
                  console.log(`Sub-issue #${subIssue.number} (${subIssue.title}): Not found in any project`);
                  continue;
                }
                
                // Estimateフィールドを探す
                let estimateFound = false;
                
                for (const projectItem of projectItems) {
                  const fieldValues = projectItem.fieldValues.nodes;
                  const estimateValue = fieldValues.find(value => 
                    value.field && 
                    value.field.name === 'Estimate'
                  );
                  
                  if (estimateValue && estimateValue.number !== null) {
                    console.log(`Sub-issue #${subIssue.number} (${subIssue.title}): Estimate = ${estimateValue.number}`);
                    totalEstimate += estimateValue.number;
                    estimateFound = true;
                    break; // 値が見つかったらこのサブイシューの処理を終了
                  }
                }
                
                if (!estimateFound) {
                  console.log(`Sub-issue #${subIssue.number} (${subIssue.title}): No estimate found`);
                }
              }
              
              console.log(`Total estimate for Epic #${issueNumber}: ${totalEstimate}`);
              console.log(`Sum of all sub-issue estimates: ${totalEstimate}`);
              
            } catch (error) {
              console.error(`Error processing Epic issue: ${error.message}`);
              console.error(error);
            }
