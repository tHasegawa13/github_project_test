name: Epic Issue Estimate Summation

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: "Epic Issue Number"
        required: true
        type: number

jobs:
  sum_estimates:
    runs-on: ubuntu-latest
    permissions:
      issues: read
      contents: read
    steps:
      - name: Check Epic label and sum sub-issue estimates
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.PROJECT_ACCESS_TOKEN}}
          script: |
            const issueNumber = parseInt(context.payload.inputs.issue_number);

            try {
              // Check if the issue has Epic label
              const issueResponse = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber
              });
              
              const issue = issueResponse.data;
              const hasEpicLabel = issue.labels.some(label => label.name === 'Epic');
              
              if (!hasEpicLabel) {
                console.log(`Issue #${issueNumber} does not have the Epic label. Skipping.`);
                return;
              }
              
              console.log(`Processing Epic issue #${issueNumber}: ${issue.title}`);
              
              // Get sub-issues using GraphQL
              const subIssuesQuery = `
                query($owner: String!, $repo: String!, $issueNumber: Int!) {
                  repository(owner: $owner, name: $repo) {
                    issue(number: $issueNumber) {
                      id
                      number
                      title
                      subIssues(first: 100) {
                        nodes {
                          id
                          number
                          title
                        }
                      }
                    }
                  }
                }
              `;
              
              const variables = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issueNumber: issueNumber
              };
              
              const result = await github.graphql(subIssuesQuery, variables);
              const subIssues = result.repository.issue.subIssues.nodes;
              
              if (subIssues.length === 0) {
                console.log(`Epic issue #${issueNumber} has no sub-issues.`);
                return;
              }
              
              console.log(`Found ${subIssues.length} sub-issues for Epic #${issueNumber}`);
              
              // Get project information
              const projectQuery = `
                query {
                  user(login: "tHasegawa13") {
                    projectV2(number: 1) {
                      id
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2FieldCommon {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const projectData = await github.graphql(projectQuery);
              const projectId = projectData.user.projectV2.id;
              
              // Output all fields in the project
              console.log('All project fields:');
              projectData.user.projectV2.fields.nodes.forEach(field => {
                console.log(`Field: ${field.name}, ID: ${field.id}`);
              });
              
              // Find the Estimate field ID
              const estimateField = projectData.user.projectV2.fields.nodes.find(
                field => field.name === 'Estimate'
              );
              
              if (!estimateField) {
                console.log('Estimate field not found in the project.');
                return;
              }
              
              const estimateFieldId = estimateField.id;
              
              // Get estimate values for each sub-issue directly
              let totalEstimate = 0;
              
              for (const subIssue of subIssues) {
                // 各サブイシューのプロジェクトアイテムIDを取得
                // ProjectV2のitem接続を使ってコンテンツIDを持つアイテムを検索する
                const itemQuery = `
                  query($projectId: ID!, $issueId: ID!) {
                    node(id: $projectId) {
                      ... on ProjectV2 {
                        items(first: 100) {
                          nodes {
                            id
                            content {
                              ... on Issue {
                                id
                                number
                                title
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                `;
                
                const itemVariables = {
                  projectId: projectId,
                  issueId: subIssue.id
                };
                
                const itemData = await github.graphql(itemQuery, itemVariables);
                // 結果からサブイシューIDに一致するアイテムをフィルタリング
                const projectItems = itemData.node.items.nodes.filter(item => 
                  item.content && item.content.id === subIssue.id
                );
                
                if (projectItems.length === 0) {
                  console.log(`Sub-issue #${subIssue.number} (${subIssue.title}): Not found in project`);
                  continue;
                }
                
                const projectItemId = projectItems[0].id;
                
                // このアイテムのEstimate値を直接取得
                const estimateQuery = `
                  query($itemId: ID!) {
                    node(id: $itemId) {
                      ... on ProjectV2Item {
                        fieldValues(first: 20) {
                          nodes {
                            ... on ProjectV2ItemFieldNumberValue {
                              field {
                                ... on ProjectV2FieldCommon {
                                  id
                                  name
                                }
                              }
                              number
                            }
                          }
                        }
                      }
                    }
                  }
                `;
                
                const estimateVariables = {
                  itemId: projectItemId
                };
                
                const estimateData = await github.graphql(estimateQuery, estimateVariables);
                
                // Estimateフィールドの値を探す
                const fieldValues = estimateData.node.fieldValues.nodes;
                const estimateValue = fieldValues.find(value => 
                  value.field && 
                  value.field.id === estimateFieldId
                );
                
                if (estimateValue && estimateValue.number !== null) {
                  console.log(`Sub-issue #${subIssue.number} (${subIssue.title}): Estimate = ${estimateValue.number}`);
                  totalEstimate += estimateValue.number;
                } else {
                  console.log(`Sub-issue #${subIssue.number} (${subIssue.title}): No estimate found`);
                }
              }
              
              console.log(`Total estimate for Epic #${issueNumber}: ${totalEstimate}`);
              console.log(`Sum of all sub-issue estimates: ${totalEstimate}`);
              
            } catch (error) {
              console.error(`Error processing Epic issue: ${error.message}`);
              console.error(error);
            }
