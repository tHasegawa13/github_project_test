name: Epic Issue Estimate Summation

on:
  workflow_dispatch:
    # 入力パラメータを削除し、すべてのEpicを処理する

jobs:
  sum_estimates:
    runs-on: ubuntu-latest
    permissions:
      issues: read
      contents: read
    steps:
      - name: Find all Epic issues and sum sub-issue estimates
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.PROJECT_ACCESS_TOKEN}}
          script: |
            try {
              // すべてのEpicラベル付きIssueを取得
              const epicIssuesQuery = `
                query($owner: String!, $repo: String!) {
                  repository(owner: $owner, name: $repo) {
                    issues(first: 100, labels: ["Epic"], states: [OPEN]) {
                      nodes {
                        id
                        number
                        title
                      }
                    }
                  }
                }
              `;
              
              const variables = {
                owner: context.repo.owner,
                repo: context.repo.repo
              };
              
              const epicIssuesResult = await github.graphql(epicIssuesQuery, variables);
              const epicIssues = epicIssuesResult.repository.issues.nodes;
              
              if (epicIssues.length === 0) {
                console.log(`No Epic issues found in repository.`);
                return;
              }
              
              console.log(`Found ${epicIssues.length} Epic issues to process.`);
              
              // Get project information
              const projectQuery = `
                query {
                  user(login: "tHasegawa13") {
                    projectV2(number: 1) {
                      id
                      title
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2FieldCommon {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const projectData = await github.graphql(projectQuery);
              const projectId = projectData.user.projectV2.id;
              const projectTitle = projectData.user.projectV2.title;
              console.log(`Target project: ${projectTitle} (ID: ${projectId})`);
              
              // プロジェクト内のフィールドを確認
              console.log('Available fields in the project:');
              projectData.user.projectV2.fields.nodes.forEach(field => {
                console.log(`- ${field.name} (ID: ${field.id})`);
              });
              
              // Find the Estimate field ID
              const estimateField = projectData.user.projectV2.fields.nodes.find(
                field => field.name === 'Estimate'
              );
              
              if (!estimateField) {
                console.log(`Could not find Estimate field in project ${projectTitle}`);
                return;
              }
              
              const estimateFieldId = estimateField.id;
              console.log(`Found Estimate field: ID: ${estimateFieldId}`);
              
              // Find the (Epic)Estimate field ID
              const epicEstimateField = projectData.user.projectV2.fields.nodes.find(
                field => field.name === '(Epic)Estimate'
              );
              
              if (!epicEstimateField) {
                console.log(`Could not find (Epic)Estimate field in project ${projectTitle}`);
                return;
              }
              
              console.log(`Found field: ${epicEstimateField.name} (ID: ${epicEstimateField.id})`);
              
              // プロジェクト内のすべてのアイテムを一度だけ取得
              const allItemsQuery = `
                query($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      items(first: 100) {
                        nodes {
                          id
                          content {
                            ... on Issue {
                              id
                              number
                              title
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const allItemsVariables = {
                projectId: projectId
              };
              
              const allItemsData = await github.graphql(allItemsQuery, allItemsVariables);
              const allProjectItems = allItemsData.node.items.nodes;
              console.log(`Retrieved ${allProjectItems.length} items from project ${projectTitle}`);
              
              // 各Epicに対して処理を実行
              for (const epicIssue of epicIssues) {
                const issueNumber = epicIssue.number;
                console.log(`Processing Epic issue #${issueNumber}: ${epicIssue.title}`);
                
                // Get sub-issues using GraphQL
                const subIssuesQuery = `
                  query($owner: String!, $repo: String!, $issueNumber: Int!) {
                    repository(owner: $owner, name: $repo) {
                      issue(number: $issueNumber) {
                        id
                        number
                        title
                        subIssues(first: 100) {
                          nodes {
                            id
                            number
                            title
                          }
                        }
                      }
                    }
                  }
                `;
                
                const subIssuesVariables = {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issueNumber: issueNumber
                };
                
                const result = await github.graphql(subIssuesQuery, subIssuesVariables);
                const subIssues = result.repository.issue.subIssues.nodes;
                
                if (subIssues.length === 0) {
                  console.log(`Epic issue #${issueNumber} has no sub-issues. Skipping.`);
                  continue;
                }
                
                console.log(`Found ${subIssues.length} sub-issues for Epic #${issueNumber}`);
                
                // Get estimate values for each sub-issue
                let totalEstimate = 0;
                
                for (const subIssue of subIssues) {
                  // サブイシューに対応するプロジェクトアイテムを見つける
                  const projectItem = allProjectItems.find(item => 
                    item.content && 
                    item.content.id === subIssue.id
                  );
                  
                  if (!projectItem) {
                    console.log(`Sub-issue #${subIssue.number} (${subIssue.title}): Not found in project ${projectTitle}`);
                    continue;
                  }
                  
                  const projectItemId = projectItem.id;
                  
                  // このアイテムのEstimate値を直接取得
                  const estimateQuery = `
                    query($projectId: ID!, $itemId: ID!, $fieldId: ID!) {
                      node(id: $projectId) {
                        ... on ProjectV2 {
                          field(id: $fieldId) {
                            ... on ProjectV2FieldCommon {
                              name
                            }
                          }
                          item(id: $itemId) {
                            fieldValueByName(name: "Estimate") {
                              ... on ProjectV2ItemFieldNumberValue {
                                number
                              }
                            }
                          }
                        }
                      }
                    }
                  `;
                  
                  const estimateVariables = {
                    projectId: projectId,
                    itemId: projectItemId,
                    fieldId: estimateFieldId
                  };
                  
                  const estimateData = await github.graphql(estimateQuery, estimateVariables);
                  const estimateValue = estimateData.node.item.fieldValueByName;
                  
                  if (estimateValue && estimateValue.number !== null) {
                    console.log(`Sub-issue #${subIssue.number} (${subIssue.title}): Estimate = ${estimateValue.number}`);
                    totalEstimate += estimateValue.number;
                  } else {
                    console.log(`Sub-issue #${subIssue.number} (${subIssue.title}): No estimate found in project ${projectTitle}`);
                  }
                }
                
                console.log(`Total estimate for Epic #${issueNumber}: ${totalEstimate}`);
                
                // Epic に対応するプロジェクトアイテムを見つける
                const epicItem = allProjectItems.find(item => 
                  item.content && 
                  item.content.id === epicIssue.id
                );
                
                if (!epicItem) {
                  console.log(`Epic issue #${issueNumber} is not associated with project ${projectTitle}. Skipping.`);
                  continue;
                }
                
                const epicItemId = epicItem.id;
                console.log(`Found Epic #${issueNumber} in project ${projectTitle} (Item ID: ${epicItemId})`);
                
                // Epicの見積もりを更新
                const fieldId = epicEstimateField.id;
                
                console.log(`Updating Epic #${issueNumber} with total estimate: ${totalEstimate}`);
                console.log(`Project ID: ${projectId}, Item ID: ${epicItemId}, Field ID: ${fieldId}`);
                
                // Estimate値を更新
                const updateMutation = `
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: Float!) {
                    updateProjectV2ItemFieldValue(
                      input: {
                        projectId: $projectId
                        itemId: $epicItemId
                        fieldId: $fieldId
                        value: { number: $value }
                      }
                    ) {
                      clientMutationId
                    }
                  }
                `;
                
                const updateVariables = {
                  projectId: projectId,
                  itemId: epicItemId,
                  fieldId: fieldId,
                  value: totalEstimate
                };
                
                try {
                  await github.graphql(updateMutation, updateVariables);
                  console.log(`Successfully updated ${epicEstimateField.name} field for Epic #${issueNumber}`);
                } catch (updateError) {
                  console.error(`Error updating Epic estimate for #${issueNumber}: ${updateError.message}`);
                  console.error(updateError);
                }
              }
              
            } catch (error) {
              console.error(`Error processing Epic issues: ${error.message}`);
              console.error(error);
            }
